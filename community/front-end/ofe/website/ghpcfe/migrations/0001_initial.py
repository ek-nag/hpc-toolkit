# Generated by Django 4.2.10 on 2024-03-08 09:27

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import ghpcfe.models
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('quota_type', models.CharField(choices=[('u', 'Unlimited compute spend'), ('l', 'Limited compute spend'), ('d', 'Compute disabled')], default='d', help_text='User Compute Quota Type', max_length=1)),
                ('quota_amount', models.DecimalField(decimal_places=2, default=0, help_text='Maximum allowed spend ($)', max_digits=8)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter an application name', max_length=30)),
                ('description', models.TextField(blank=True, help_text='(Optional) description of this application', max_length=4000, null=True)),
                ('version', models.CharField(blank=True, help_text='(Optional) which version of this application', max_length=30, null=True)),
                ('installed_architecture', models.CharField(blank=True, help_text='CPU architecture of installed package', max_length=128, null=True)),
                ('load_command', models.CharField(blank=True, help_text="Commands to load the application package, e.g. 'spack load xxx' or 'module load yyy'", max_length=200, null=True)),
                ('compiler', models.CharField(blank=True, help_text='Which compiler was used to build this application', max_length=40, null=True)),
                ('mpi', models.CharField(blank=True, help_text='Which MPI library was this application built against', max_length=40, null=True)),
                ('status', models.CharField(choices=[('n', 'Application is being newly configured'), ('p', 'Application installation is being prepared'), ('q', 'Application installation is in job queue'), ('i', 'Application is being installed'), ('r', 'Application successfully installed and ready to run'), ('e', 'Application installation completed in error'), ('x', 'Hosting cluster has been destroyed')], default='n', help_text='Status of this application installation', max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='AuthorisedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', models.CharField(help_text='Enter a domain name starting with @ to authorise a group of users or an email address to authorise an individual user', max_length=60, validators=[ghpcfe.models.validate_domain_or_email])),
            ],
        ),
        migrations.CreateModel(
            name='Benchmark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name of this benchmark', max_length=30)),
                ('description', models.TextField(help_text='Enter a description of this benchmark', max_length=4000)),
            ],
        ),
        migrations.CreateModel(
            name='C2Callback',
            fields=[
                ('ackid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('callback', ghpcfe.models.CallbackField()),
            ],
        ),
        migrations.CreateModel(
            name='CloudResource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cloud_id', models.CharField(blank=True, help_text='Cloud Resource id (GCP name, etc...)', max_length=4096, null=True)),
                ('cloud_state', models.CharField(choices=[('i', 'Imported'), ('nm', 'New'), ('cm', 'Creating'), ('m', 'Managed/Running'), ('re', 'Reconfiguring'), ('dm', 'Destroying'), ('xm', 'Destroyed'), ('um', 'Unknown')], default='nm', help_text='Current state of this cloud resource', max_length=2)),
                ('cloud_region', models.CharField(help_text='The region of this cloud resource', max_length=30)),
                ('cloud_zone', models.CharField(blank=True, help_text='The zone of this cloud resource', max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClusterPartition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Partition name must start with a lowercase letter and can have up to 7 character (lowercase letters or digits).', max_length=7, validators=[django.core.validators.RegexValidator(message='Name must start with a lowercase letter and can have up to 7 characters (lowercase letters or digits).', regex='^[a-z](?:[a-z0-9]{0,6})$'), django.core.validators.MaxLengthValidator(7, 'Name cannot exceed 7 characters.')])),
                ('machine_type', models.CharField(help_text='GCP Instance Type name', max_length=40)),
                ('dynamic_node_count', models.PositiveIntegerField(default=2, help_text='The maximum number of dynamic nodes in the partition', validators=[django.core.validators.MinValueValidator(0)])),
                ('static_node_count', models.PositiveIntegerField(default=0, help_text='The number of statically created nodes in the partition', validators=[django.core.validators.MinValueValidator(0)])),
                ('enable_placement', models.BooleanField(default=False, help_text='Enable Placement Groups (currently only valid for C2, C2D and C3instances)')),
                ('enable_hyperthreads', models.BooleanField(default=False, help_text='Enable Hyperthreads (SMT)')),
                ('enable_node_reuse', models.BooleanField(default=True, help_text='Enable nodes to be re-used for multiple jobs. (Disabled when Placement Groups are used.)')),
                ('vCPU_per_node', models.PositiveIntegerField(default=1, help_text='The number of vCPU per node of the partition', validators=[django.core.validators.MinValueValidator(1)])),
                ('boot_disk_type', models.CharField(default='pd-standard', help_text='GCP Persistent Disk type', max_length=30)),
                ('boot_disk_size', models.PositiveIntegerField(blank=True, default=50, help_text='Boot disk size (in GB)', validators=[django.core.validators.MinValueValidator(49)])),
                ('GPU_per_node', models.PositiveIntegerField(default=0, help_text='The number of GPU per node of the partition', validators=[django.core.validators.MinValueValidator(0)])),
                ('GPU_type', models.CharField(blank=True, default='', help_text='GPU device type', max_length=64)),
                ('additional_disk_count', models.PositiveIntegerField(blank=True, default=0, help_text='How many additional disks?')),
                ('additional_disk_type', models.CharField(blank=True, default='pd-standard', help_text='Additional Disk type', max_length=30)),
                ('additional_disk_size', models.PositiveIntegerField(blank=True, default=375, help_text='Disk size (in GB)')),
                ('additional_disk_auto_delete', models.BooleanField(default=True, help_text='Automatically delete additional disk when node is deleted?')),
            ],
        ),
        migrations.CreateModel(
            name='FilesystemExport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_name', models.CharField(help_text='An export from NFS, or name of FS for Lustre, etc.', max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.PositiveSmallIntegerField(choices=[(1, 'cluster administrator'), (2, 'normal user'), (3, 'viewer')], primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='WorkbenchPreset',
            fields=[
                ('name', models.CharField(help_text='Enter a name for the Workbench Preset', max_length=40, primary_key=True, serialize=False)),
                ('machine_type', models.CharField(default='n1-standard-1', help_text='The machine type for this workbench size', max_length=40)),
                ('category', models.CharField(help_text='Enter the heading this preset should appear under', max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('cloudresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.cloudresource')),
                ('name', models.CharField(help_text='Enter a name for the cluster', max_length=17, validators=[django.core.validators.RegexValidator('^[a-z]([-a-z0-9]{0,15}[a-z0-9])$', message='Cluster Name must be RFC1035 Compliant (lower case, alphanumeric with hyphens)')])),
                ('status', models.CharField(choices=[('n', 'Cluster is being newly configured by user'), ('c', 'Cluster is being created'), ('i', 'Cluster is being initialised'), ('r', 'Cluster is ready for jobs'), ('re', 'Cluster is reconfiguring'), ('s', 'Cluster is stopped (can be restarted)'), ('t', 'Cluster is terminating'), ('e', 'Cluster deployment has failed'), ('d', 'Cluster has been deleted')], default='n', help_text='Status of this cluster', max_length=2)),
                ('spackdir', models.CharField(default='/opt/cluster/spack', help_text='Specify where Spack install applications on the cluster', max_length=4096, verbose_name='Spack directory')),
                ('controller_instance_type', models.CharField(default='n2-standard-2', help_text='GCP Instance Type name for the controller', max_length=40)),
                ('controller_disk_type', models.CharField(default='pd-standard', help_text='GCP Persistent Disk type', max_length=30)),
                ('controller_disk_size', models.PositiveIntegerField(blank=True, default=50, help_text='Boot disk size (in GB)', validators=[django.core.validators.MinValueValidator(10)])),
                ('num_login_nodes', models.PositiveIntegerField(default=1, help_text='The number of login nodes to create', validators=[django.core.validators.MinValueValidator(0)])),
                ('login_node_instance_type', models.CharField(default='n2-standard-2', help_text='GCP Instance Type name for the login nodes', max_length=40)),
                ('login_node_disk_type', models.CharField(default='pd-standard', help_text='GCP Persistent Disk type', max_length=30)),
                ('login_node_disk_size', models.PositiveIntegerField(blank=True, default=50, help_text='Boot disk size (in GB)', validators=[django.core.validators.MinValueValidator(50)])),
                ('grafana_dashboard_url', models.CharField(blank=True, max_length=512, null=True)),
                ('use_cloudsql', models.BooleanField(default=False, help_text='Would you like to use Cloud SQL for Slurm accounting database?')),
                ('use_bigquery', models.BooleanField(default=False, help_text='Would you like to send Slurm accounting data to BigQuery?')),
                ('enable_spack', models.BooleanField(default=False, help_text='Enable Spack applications for this cluster?')),
                ('enable_ngc_containers', models.BooleanField(default=False, help_text='Enable NGC containers support for this cluster?')),
            ],
            bases=('ghpcfe.cloudresource',),
        ),
        migrations.CreateModel(
            name='CustomInstallationApplication',
            fields=[
                ('application_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.application')),
                ('install_script', models.CharField(help_text='The URL to a an installation script, or the raw script', max_length=8192)),
                ('module_name', models.CharField(blank=True, help_text='name of module file to install, and load', max_length=128, null=True)),
                ('module_script', models.CharField(blank=True, help_text='environment modules file to install to load application', max_length=8192, null=True)),
            ],
            bases=('ghpcfe.application',),
        ),
        migrations.CreateModel(
            name='Filesystem',
            fields=[
                ('cloudresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.cloudresource')),
                ('name', models.CharField(help_text='Enter a name for the file system', max_length=40)),
                ('internal_name', models.CharField(blank=True, help_text='name generated by system (not to be set by user)', max_length=40, null=True)),
                ('impl_type', models.PositiveIntegerField(choices=[(0, 'Cluster Built-in'), (1, 'GCP Filestore'), (2, 'Imported Filesystem')])),
                ('fstype', models.CharField(choices=[(' ', 'none'), ('n', 'nfs'), ('l', 'lustre'), ('d', 'daos'), ('b', 'beegfs')], default=' ', help_text='Type of Filesystem (NFS, Lustre, etc)', max_length=1)),
                ('hostname_or_ip', models.CharField(blank=True, help_text='Hostname or IP address of Filesystem server', max_length=128, null=True)),
            ],
            bases=('ghpcfe.cloudresource',),
        ),
        migrations.CreateModel(
            name='SpackApplication',
            fields=[
                ('application_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.application')),
                ('spack_name', models.CharField(blank=True, help_text='Name of the application in Spack', max_length=30, null=True)),
                ('spack_spec', models.CharField(blank=True, help_text='Spack spec describing this particular build configuration', max_length=200, null=True)),
                ('spack_hash', models.CharField(blank=True, help_text='Hash of the Spack installation of the application package', max_length=32, null=True)),
            ],
            bases=('ghpcfe.application',),
        ),
        migrations.CreateModel(
            name='VirtualNetwork',
            fields=[
                ('cloudresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.cloudresource')),
                ('name', models.CharField(help_text='Name for the virtual network', max_length=64, validators=[django.core.validators.RegexValidator('^[a-z]([-a-z0-9]{0,61}[a-z0-9])$', message='VPC Name must be RFC1035 Compliant (lower case, alphanumeric with hyphens)')])),
            ],
            bases=('ghpcfe.cloudresource',),
        ),
        migrations.CreateModel(
            name='VirtualSubnet',
            fields=[
                ('cloudresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.cloudresource')),
                ('name', models.CharField(help_text='Name for the virtual subnet', max_length=64, validators=[django.core.validators.RegexValidator('^[a-z]([-a-z0-9]{0,61}[a-z0-9])$', message='Subnet Name must be RFC1035 Compliant (lower case,  alphanumeric with hyphens)')])),
                ('cidr', models.CharField(help_text='CIDR for this subnet', max_length=18, validators=[ghpcfe.models.CIDRValidator])),
                ('vpc', models.ForeignKey(help_text='The VPC to which this subnet belongs', on_delete=django.db.models.deletion.CASCADE, related_name='subnets', to='ghpcfe.virtualnetwork')),
            ],
            bases=('ghpcfe.cloudresource',),
        ),
        migrations.CreateModel(
            name='Workbench',
            fields=[
                ('cloudresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.cloudresource')),
                ('name', models.CharField(help_text='Enter a name for the Workbench', max_length=40, validators=[django.core.validators.RegexValidator('^[a-z]([-a-z0-9]{0,61}[a-z0-9])$', message='Workbench Name must be RFC1035 Compliant (lower-case alphanumeric with hyphens)')])),
                ('internal_name', models.CharField(blank=True, help_text='Workbench name generated by system (not to be set by user)', max_length=40, null=True)),
                ('status', models.CharField(choices=[('n', 'Workbench is being newly configured by user'), ('c', 'Workbench is being created'), ('i', 'Workbench is being initialised'), ('r', 'Workbench is ready'), ('s', 'Workbench is stopped (can be restarted)'), ('t', 'Workbench is terminating'), ('e', 'Workbench deployment has failed'), ('d', 'Workbench has been destroyed')], default='n', help_text='Status of this cluster', max_length=1)),
                ('machine_type', models.CharField(default='n1-standard-1', help_text='The machine type for this workbench', max_length=40)),
                ('boot_disk_type', models.CharField(choices=[('PD_STANDARD', 'Standard Persistent Disk'), ('PD_BALANCED', 'Balanced Persistent Disk'), ('PD_SSD', 'SSD Persistent Disk')], default='PD_STANDARD', help_text='Type of storage to be required for notebook boot disk', max_length=11)),
                ('boot_disk_capacity', models.PositiveIntegerField(default=100, help_text='Capacity (in GB) of the filesystem (min of 1024)', validators=[django.core.validators.MinValueValidator(100)])),
                ('proxy_uri', models.CharField(blank=True, max_length=150, null=True)),
                ('image_family', models.CharField(choices=[('common-cpu-notebooks-ubuntu-2004', 'Base Python 3 (with Intel MKL)'), ('tf-latest-cpu-ubuntu-2004', 'TensorFlow Enterprise (Intel® MKL-DNN/MKL)'), ('pytorch-latest-cpu-ubuntu-2004', 'PyTorch'), ('r-latest-cpu-experimental-ubuntu-2004', 'R (Experimental)')], default='base-cpu', help_text='Select the image family that you wish to use', max_length=64)),
                ('attached_cluster', models.ForeignKey(blank=True, help_text='Cluster to which jobs may be submitted', null=True, on_delete=ghpcfe.models.RESTRICT_IF_CLOUD_ACTIVE, related_name='attached_workbenches', to='ghpcfe.cluster')),
            ],
            bases=('ghpcfe.cloudresource',),
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('owner', models.ForeignKey(help_text='Who is running the task', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StartupScript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a startup script name', max_length=30)),
                ('description', models.TextField(blank=True, help_text='(Optional) description of this startup script', max_length=4000, null=True)),
                ('type', models.CharField(choices=[('shell', 'Shell script'), ('ansible-local', 'Ansible playbook')], default='shell', help_text='Type of this application installation', max_length=13)),
                ('content', models.FileField(help_text='Startup script file.', upload_to='startup-scripts/')),
                ('authorised_users', models.ManyToManyField(help_text='Select other users authorised to use this startup script', related_name='startup_script_authorised_users', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(help_text='Who owns this startup script?', on_delete=django.db.models.deletion.RESTRICT, related_name='startup_script_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a name for this credential, e.g. My GCP credential', max_length=30)),
                ('detail', models.TextField(help_text='Obtain the credential json and copy/paste it into this text field.', max_length=4000)),
                ('owner', models.ForeignKey(help_text='Who owns this credential?', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='cloudresource',
            name='cloud_credential',
            field=models.ForeignKey(help_text='Choose the credential to use with this cloud resource', on_delete=django.db.models.deletion.RESTRICT, to='ghpcfe.credential'),
        ),
        migrations.CreateModel(
            name='ApplicationInstallationLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(help_text='Directory in the filestore where application resides', max_length=2048)),
                ('fs_export', models.ForeignKey(help_text='Filestore on which the application resides', on_delete=django.db.models.deletion.CASCADE, to='ghpcfe.filesystemexport')),
            ],
        ),
        migrations.AddField(
            model_name='application',
            name='install_loc',
            field=models.ForeignKey(blank=True, help_text='Location of the application installation', null=True, on_delete=django.db.models.deletion.CASCADE, to='ghpcfe.applicationinstallationlocation'),
        ),
        migrations.AddField(
            model_name='application',
            name='install_partition',
            field=models.ForeignKey(blank=True, help_text='Cluster partition on which the installation job will be run', null=True, on_delete=django.db.models.deletion.RESTRICT, to='ghpcfe.clusterpartition'),
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(to='ghpcfe.role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='GCPFilestoreFilesystem',
            fields=[
                ('filesystem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.filesystem')),
                ('capacity', models.PositiveIntegerField(default=1024, help_text='Capacity (in GB) of the filesystem (min of 2660)', validators=[django.core.validators.MinValueValidator(1024)])),
                ('performance_tier', models.CharField(choices=[('bh', 'BASIC_HDD'), ('bs', 'BASIC_SSD'), ('hs', 'HIGH_SCALE_SSD'), ('en', 'ENTERPRISE')], help_text='Filestore Performance Tier', max_length=2)),
            ],
            bases=('ghpcfe.filesystem',),
        ),
        migrations.CreateModel(
            name='WorkbenchMountPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mount_order', models.PositiveIntegerField(default=0, help_text='Mounts are mounted in numerically increasing order')),
                ('mount_path', models.CharField(help_text='Path on which to mount this filesystem', max_length=4096)),
                ('export', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='ghpcfe.filesystemexport')),
                ('workbench', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mount_points', to='ghpcfe.workbench')),
            ],
        ),
        migrations.AddField(
            model_name='workbench',
            name='owner',
            field=models.ForeignKey(help_text='Who owns this Workbench?', on_delete=django.db.models.deletion.RESTRICT, related_name='workbench_owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='workbench',
            name='subnet',
            field=models.ForeignKey(blank=True, help_text='Subnet within which the workbench resides', null=True, on_delete=ghpcfe.models.RESTRICT_IF_CLOUD_ACTIVE, related_name='workbench_subnet', to='ghpcfe.virtualsubnet'),
        ),
        migrations.AddField(
            model_name='workbench',
            name='trusted_user',
            field=models.ForeignKey(help_text='Select primary user authorised to use this workbench', on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MountPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mount_order', models.PositiveIntegerField(default=0, help_text='Mounts are mounted in numerically increasing order')),
                ('mount_options', models.CharField(blank=True, help_text='Mount options (passed to mount -o)', max_length=128)),
                ('mount_path', models.CharField(help_text='Path on which to mount this filesystem', max_length=4096)),
                ('export', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='ghpcfe.filesystemexport')),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mount_points', to='ghpcfe.cluster')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a job name', max_length=40)),
                ('date_time_submission', models.DateTimeField(auto_now_add=True, null=True)),
                ('number_of_nodes', models.PositiveIntegerField(help_text='The number of nodes to use', validators=[django.core.validators.MinValueValidator(1)])),
                ('ranks_per_node', models.PositiveIntegerField(help_text='The number of MPI ranks per node', validators=[django.core.validators.MinValueValidator(1)])),
                ('threads_per_rank', models.PositiveIntegerField(default=1, help_text='The number of threads per MPI rank (for hybrid jobs)', validators=[django.core.validators.MinValueValidator(1)])),
                ('wall_clock_time_limit', models.PositiveIntegerField(blank=True, default=0, help_text='The wall clock time limit of this job (in minutes)', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('run_script', models.CharField(help_text='The URL to the job script (a shell script or a tarball containing run.sh). Or the raw script', max_length=8192)),
                ('input_data', models.CharField(blank=True, help_text='(Optional) the URL to download input dataset', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^(?:http|https|gs|s3)://(?:(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}|([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?|localhost))(?::\\d{2,5})?(?:[/?#][^\\s]*)?\\Z', 2), message='Error validating cloud storage URL')])),
                ('result_data', models.CharField(blank=True, help_text='(Optional) the URL to upload result dataset', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^(?:http|https|gs|s3)://(?:(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}|([a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?(?:\\.(?!-)[a-z¡-\uffff0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z¡-\uffff-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|[a-z¡-\uffff0-9](?:[a-z¡-\uffff0-9-]{0,61}[a-z¡-\uffff0-9])?|localhost))(?::\\d{2,5})?(?:[/?#][^\\s]*)?\\Z', 2), message='Error validating cloud storage URL')])),
                ('slurm_jobid', models.PositiveIntegerField(blank=True, help_text='SLURM Job ID', null=True)),
                ('status', models.CharField(choices=[('n', 'A new job has been created and is being configured'), ('p', 'Job is being prepared'), ('q', 'Job is in a queue'), ('d', 'Job input dataset is being downloaded from long-term storage'), ('r', 'Job is running on the cluster'), ('u', 'Job result dataset is being uploaded to long-term storage'), ('c', 'Job has completed successfully'), ('e', 'Job has completed in error')], default='n', help_text='Status of this job', max_length=1)),
                ('runtime', models.FloatField(blank=True, help_text='Job run time (in seconds)', null=True)),
                ('node_price', models.DecimalField(blank=True, decimal_places=3, help_text='Node price - hourly rate', max_digits=8, null=True)),
                ('job_cost', models.DecimalField(blank=True, decimal_places=3, default=0.0, help_text='Total job cost (predicted or actual)', max_digits=12)),
                ('result_unit', models.CharField(blank=True, help_text='The unit of a key performance indicator', max_length=20, null=True)),
                ('result_value', models.FloatField(blank=True, help_text='The value of a key performance indicator', null=True)),
                ('cleanup_choice', models.CharField(choices=[('a', 'Always remove job files'), ('e', 'Only remove job files on error'), ('s', 'Only remove job files on success'), ('n', 'Never remove job files')], default='n', help_text='When to remove job files', max_length=1)),
                ('application', models.ForeignKey(help_text='Which application installation to use?', on_delete=django.db.models.deletion.RESTRICT, to='ghpcfe.application')),
                ('benchmark', models.ForeignKey(blank=True, help_text='(Optional) Identify the benchmark this job belongs to', null=True, on_delete=django.db.models.deletion.RESTRICT, to='ghpcfe.benchmark')),
                ('partition', models.ForeignKey(help_text='Cluster partition on which the job will be run', on_delete=django.db.models.deletion.CASCADE, to='ghpcfe.clusterpartition')),
                ('user', models.ForeignKey(help_text='Who owns this job?', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('cluster', models.ForeignKey(help_text='Which cluster was used for this job', null=True, on_delete=django.db.models.deletion.SET_NULL, to='ghpcfe.cluster')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('cloudresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.cloudresource')),
                ('name', models.CharField(help_text='Enter an image name', max_length=30, unique=True)),
                ('family', models.CharField(help_text='Enter you new image family', max_length=30, unique=True)),
                ('source_image_project', models.CharField(default='schedmd-slurm-public', help_text='Enter a source image project', max_length=60)),
                ('source_image_family', models.CharField(default='schedmd-v5-slurm-22-05-8-rocky-linux-8', help_text='Enter a source image family', max_length=60)),
                ('enable_os_login', models.CharField(choices=[('TRUE', 'TRUE'), ('FALSE', 'FALSE')], default='TRUE', help_text='Enable OS Login during the image creation?', max_length=5)),
                ('block_project_ssh_keys', models.CharField(choices=[('TRUE', 'TRUE'), ('FALSE', 'FALSE')], default='TRUE', help_text="Don't use SSH keys in project metadata to create users?", max_length=5)),
                ('status', models.CharField(choices=[('n', 'Image is being newly configured by user'), ('c', 'Image is being created'), ('r', 'Image is ready'), ('e', 'Image creation has failed')], default='n', help_text='Status of this image', max_length=1)),
                ('authorised_users', models.ManyToManyField(help_text='Select other users authorised to use this image', related_name='image_authorised_users', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(help_text='Who owns this image?', on_delete=django.db.models.deletion.RESTRICT, related_name='image_owner', to=settings.AUTH_USER_MODEL)),
                ('startup_script', models.ManyToManyField(help_text='Which startup scripts to use?', to='ghpcfe.startupscript')),
            ],
            bases=('ghpcfe.cloudresource',),
        ),
        migrations.AddField(
            model_name='filesystemexport',
            name='filesystem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exports', to='ghpcfe.filesystem'),
        ),
        migrations.AddField(
            model_name='filesystem',
            name='subnet',
            field=models.ForeignKey(blank=True, help_text='Subnet within which the Filesystem resides (if any)', null=True, on_delete=ghpcfe.models.RESTRICT_IF_CLOUD_ACTIVE, related_name='filesystems', to='ghpcfe.virtualsubnet'),
        ),
        migrations.AddField(
            model_name='filesystem',
            name='vpc',
            field=models.ForeignKey(help_text='Network within which the Filesystem resides', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='filesystems', to='ghpcfe.virtualnetwork'),
        ),
        migrations.CreateModel(
            name='ComputeInstance',
            fields=[
                ('cloudresource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ghpcfe.cloudresource')),
                ('internal_ip', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('public_ip', models.GenericIPAddressField(blank=True, null=True, protocol='IPv4')),
                ('instance_type', models.CharField(help_text='GCP Instance Type name', max_length=40)),
                ('service_account', models.EmailField(blank=True, default='', max_length=512, null=True)),
                ('cluster_login', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='login_nodes', to='ghpcfe.cluster')),
            ],
            bases=('ghpcfe.cloudresource',),
        ),
        migrations.AddField(
            model_name='clusterpartition',
            name='cluster',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partitions', to='ghpcfe.cluster'),
        ),
        migrations.AddField(
            model_name='clusterpartition',
            name='image',
            field=models.ForeignKey(blank=True, default=None, help_text='Select compute node image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compute_node_image', to='ghpcfe.image'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='authorised_users',
            field=models.ManyToManyField(help_text='Select other users authorised to use this cluster', related_name='authorised_users', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cluster',
            name='controller_node',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ghpcfe.computeinstance'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='controller_node_image',
            field=models.ForeignKey(blank=True, default=None, help_text='Select controller node image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='controller_node_image', to='ghpcfe.image'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='login_node_image',
            field=models.ForeignKey(blank=True, default=None, help_text='Select login node image', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='login_node_image', to='ghpcfe.image'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='owner',
            field=models.ForeignKey(help_text='Who owns this cluster?', on_delete=django.db.models.deletion.RESTRICT, related_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='cluster',
            name='shared_fs',
            field=models.ForeignKey(blank=True, null=True, on_delete=ghpcfe.models.RESTRICT_IF_CLOUD_ACTIVE, related_name='+', to='ghpcfe.filesystem'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='spack_install',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='ghpcfe.applicationinstallationlocation'),
        ),
        migrations.AddField(
            model_name='cluster',
            name='subnet',
            field=models.ForeignKey(blank=True, help_text='Subnet within which the cluster resides', null=True, on_delete=ghpcfe.models.RESTRICT_IF_CLOUD_ACTIVE, related_name='clusters', to='ghpcfe.virtualsubnet'),
        ),
        migrations.AddField(
            model_name='application',
            name='cluster',
            field=models.ForeignKey(help_text='Which cluster was used to install the application', on_delete=django.db.models.deletion.CASCADE, to='ghpcfe.cluster'),
        ),
    ]
